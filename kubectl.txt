1.Create a namespace
kubectl create namespace eks-sample-app

2. Create a Kubernetes deployment.
a. Save the following contents to a file named eks-sample-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-sample-linux-deployment
  namespace: eks-sample-app
  labels:
    app: eks-sample-linux-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: eks-sample-linux-app
  template:
    metadata:
      labels:
        app: eks-sample-linux-app
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: nginx
        image: public.ecr.aws/nginx/nginx:1.23
        ports:
        - name: http
          containerPort: 80
        imagePullPolicy: IfNotPresent
      nodeSelector:
        kubernetes.io/os: linux

b. Apply the deployment manifest to your cluster.
kubectl apply -f eks-sample-deployment.yaml

3. Create a service.
a. Save the following contents to a file named eks-sample-service.yaml.
apiVersion: v1
kind: Service
metadata:
  name: eks-sample-linux-service
  namespace: eks-sample-app
  labels:
    app: eks-sample-linux-app
spec:
  selector:
    app: eks-sample-linux-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

b. Apply the service manifest to your cluster.
kubectl get all -n eks-sample-app

4. View all resources that exist in the eks-sample-app namespace.
kubectl get all -n eks-sample-app

5. View the details of the deployed service. If you deployed a service.
kubectl -n eks-sample-app describe service eks-sample-linux-service

6. View the details of one of the Pods listed in the output when you viewed the namespace in a previous step. If you deployed a Windows app, replace linux with windows and replace 776d8f8fd8-78w66 with the value returned for one of your Pods.
kubectl -n eks-sample-app describe pod eks-sample-linux-deployment-65b7669776-m6qxz

7. Run a shell on the Pod that you described in the previous step, replacing 65b7669776-m6qxz with the ID of one of your Pods.
kubectl exec -it eks-sample-linux-deployment-65b7669776-m6qxz -n eks-sample-app -- /bin/bash

8. From the Pod shell, view the output from the web server that was installed with your deployment in a previous step. You only need to specify the service name. It is resolved to the service's IP address by CoreDNS, which is deployed with an Amazon EKS cluster, by default.
curl eks-sample-linux-service

9. From the Pod shell, view the DNS server for the Pod.
cat /etc/resolv.conf

10. Disconnect from the Pod by typing exit.

11. Once you're finished with the sample application, you can remove the sample namespace, service, and deployment with the following command.
kubectl delete namespace eks-sample-app



kubectl get pods -n eks-sample-app
kubectl config set-context --current --namespace=eks-sample-app